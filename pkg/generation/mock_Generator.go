// Code generated by mockery v1.0.0. DO NOT EDIT.

package generation

import discovery "github.com/OpenBankingUK/conformance-suite/pkg/discovery"
import logrus "github.com/sirupsen/logrus"
import manifest "github.com/OpenBankingUK/conformance-suite/pkg/manifest"
import mock "github.com/stretchr/testify/mock"
import model "github.com/OpenBankingUK/conformance-suite/pkg/model"

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

// GenerateManifestTests provides a mock function with given fields: log, config, _a2, ctx
func (_m *MockGenerator) GenerateManifestTests(log *logrus.Entry, config GeneratorConfig, _a2 discovery.ModelDiscovery, ctx *model.Context, cond []discovery.ConditionalAPIProperties, interactionId string) (SpecRun, manifest.Scripts, map[string][]manifest.RequiredTokens) {
	ret := _m.Called(log, config, _a2, ctx)

	var r0 SpecRun
	if rf, ok := ret.Get(0).(func(*logrus.Entry, GeneratorConfig, discovery.ModelDiscovery, *model.Context) SpecRun); ok {
		r0 = rf(log, config, _a2, ctx)
	} else {
		r0 = ret.Get(0).(SpecRun)
	}

	var r1 manifest.Scripts
	if rf, ok := ret.Get(1).(func(*logrus.Entry, GeneratorConfig, discovery.ModelDiscovery, *model.Context) manifest.Scripts); ok {
		r1 = rf(log, config, _a2, ctx)
	} else {
		r1 = ret.Get(1).(manifest.Scripts)
	}

	var r2 map[string][]manifest.RequiredTokens
	if rf, ok := ret.Get(2).(func(*logrus.Entry, GeneratorConfig, discovery.ModelDiscovery, *model.Context) map[string][]manifest.RequiredTokens); ok {
		r2 = rf(log, config, _a2, ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(map[string][]manifest.RequiredTokens)
		}
	}

	return r0, r1, r2
}
